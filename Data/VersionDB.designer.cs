#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModulesLoader.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VersionDB")]
	public partial class VersionDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttUpdateNumber(tUpdateNumber instance);
    partial void UpdatetUpdateNumber(tUpdateNumber instance);
    partial void DeletetUpdateNumber(tUpdateNumber instance);
    partial void InsertAssemblyFile(AssemblyFile instance);
    partial void UpdateAssemblyFile(AssemblyFile instance);
    partial void DeleteAssemblyFile(AssemblyFile instance);
    partial void InserttHostUpdateLog(tHostUpdateLog instance);
    partial void UpdatetHostUpdateLog(tHostUpdateLog instance);
    partial void DeletetHostUpdateLog(tHostUpdateLog instance);
    partial void InserttAssemblyProject(tAssemblyProject instance);
    partial void UpdatetAssemblyProject(tAssemblyProject instance);
    partial void DeletetAssemblyProject(tAssemblyProject instance);
    #endregion
		
		public VersionDBDataContext() : 
				base(global::ModulesLoader.Properties.Settings.Default.VersionDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VersionDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VersionDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VersionDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VersionDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tUpdateNumber> tUpdateNumbers
		{
			get
			{
				return this.GetTable<tUpdateNumber>();
			}
		}
		
		public System.Data.Linq.Table<AssemblyFile> AssemblyFiles
		{
			get
			{
				return this.GetTable<AssemblyFile>();
			}
		}
		
		public System.Data.Linq.Table<tHostUpdateLog> tHostUpdateLogs
		{
			get
			{
				return this.GetTable<tHostUpdateLog>();
			}
		}
		
		public System.Data.Linq.Table<tAssemblyProject> tAssemblyProjects
		{
			get
			{
				return this.GetTable<tAssemblyProject>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectAssemblyByAssemblyName")]
		public ISingleResult<SelectAssemblyByAssemblyNameResult> SelectAssemblyByAssemblyName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssemblyName", DbType="VarChar(64)")] string assemblyName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), assemblyName);
			return ((ISingleResult<SelectAssemblyByAssemblyNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateHostLog")]
		public int UpdateHostLog([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssemblyProjectID", DbType="Int")] System.Nullable<int> assemblyProjectID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HostName", DbType="VarChar(256)")] string hostName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HostIP", DbType="VarChar(32)")] string hostIP)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), assemblyProjectID, hostName, hostIP);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateHostLog02")]
		public int UpdateHostLog02([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssemblyProjectID", DbType="Int")] System.Nullable<int> assemblyProjectID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HostName", DbType="NVarChar(256)")] string hostName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HostIP", DbType="NVarChar(32)")] string hostIP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssemblyNames", DbType="NVarChar(2048)")] string assemblyNames)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), assemblyProjectID, hostName, hostIP, assemblyNames);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tUpdateNumber")]
	public partial class tUpdateNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssemblyProjectID;
		
		private int _UpdateNumber;
		
		private System.DateTime _LastUpdateDate;
		
		private EntityRef<tAssemblyProject> _tAssemblyProject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemblyProjectIDChanging(int value);
    partial void OnAssemblyProjectIDChanged();
    partial void OnUpdateNumberChanging(int value);
    partial void OnUpdateNumberChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public tUpdateNumber()
		{
			this._tAssemblyProject = default(EntityRef<tAssemblyProject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssemblyProjectID
		{
			get
			{
				return this._AssemblyProjectID;
			}
			set
			{
				if ((this._AssemblyProjectID != value))
				{
					if (this._tAssemblyProject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssemblyProjectIDChanging(value);
					this.SendPropertyChanging();
					this._AssemblyProjectID = value;
					this.SendPropertyChanged("AssemblyProjectID");
					this.OnAssemblyProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UpdateNumber
		{
			get
			{
				return this._UpdateNumber;
			}
			set
			{
				if ((this._UpdateNumber != value))
				{
					this.OnUpdateNumberChanging(value);
					this.SendPropertyChanging();
					this._UpdateNumber = value;
					this.SendPropertyChanged("UpdateNumber");
					this.OnUpdateNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tAssemblyProject_tUpdateNumber", Storage="_tAssemblyProject", ThisKey="AssemblyProjectID", OtherKey="AssemmblyProjectID", IsForeignKey=true)]
		public tAssemblyProject tAssemblyProject
		{
			get
			{
				return this._tAssemblyProject.Entity;
			}
			set
			{
				tAssemblyProject previousValue = this._tAssemblyProject.Entity;
				if (((previousValue != value) 
							|| (this._tAssemblyProject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tAssemblyProject.Entity = null;
						previousValue.tUpdateNumbers.Remove(this);
					}
					this._tAssemblyProject.Entity = value;
					if ((value != null))
					{
						value.tUpdateNumbers.Add(this);
						this._AssemblyProjectID = value.AssemmblyProjectID;
					}
					else
					{
						this._AssemblyProjectID = default(int);
					}
					this.SendPropertyChanged("tAssemblyProject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tVersionFiles")]
	public partial class AssemblyFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssemblyID;
		
		private int _AssemblyProjectID;
		
		private string _AssemblyName;
		
		private string _AssemblyVersion;
		
		private int _AssemblyLength;
		
		private System.DateTime _AssemblyDate;
		
		private System.Data.Linq.Binary _AssemblyFiles;
		
		private bool _Compressed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemblyIDChanging(int value);
    partial void OnAssemblyIDChanged();
    partial void OnAssemblyProjectIDChanging(int value);
    partial void OnAssemblyProjectIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnAssemblyVersionChanging(string value);
    partial void OnAssemblyVersionChanged();
    partial void OnAssemblyLengthChanging(int value);
    partial void OnAssemblyLengthChanged();
    partial void OnAssemblyDateChanging(System.DateTime value);
    partial void OnAssemblyDateChanged();
    partial void OnAssemblyFilesChanging(System.Data.Linq.Binary value);
    partial void OnAssemblyFilesChanged();
    partial void OnCompressedChanging(bool value);
    partial void OnCompressedChanged();
    #endregion
		
		public AssemblyFile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssemblyID
		{
			get
			{
				return this._AssemblyID;
			}
			set
			{
				if ((this._AssemblyID != value))
				{
					this.OnAssemblyIDChanging(value);
					this.SendPropertyChanging();
					this._AssemblyID = value;
					this.SendPropertyChanged("AssemblyID");
					this.OnAssemblyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyProjectID", DbType="Int NOT NULL")]
		public int AssemblyProjectID
		{
			get
			{
				return this._AssemblyProjectID;
			}
			set
			{
				if ((this._AssemblyProjectID != value))
				{
					this.OnAssemblyProjectIDChanging(value);
					this.SendPropertyChanging();
					this._AssemblyProjectID = value;
					this.SendPropertyChanged("AssemblyProjectID");
					this.OnAssemblyProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyVersion", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string AssemblyVersion
		{
			get
			{
				return this._AssemblyVersion;
			}
			set
			{
				if ((this._AssemblyVersion != value))
				{
					this.OnAssemblyVersionChanging(value);
					this.SendPropertyChanging();
					this._AssemblyVersion = value;
					this.SendPropertyChanged("AssemblyVersion");
					this.OnAssemblyVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyLength", DbType="Int NOT NULL")]
		public int AssemblyLength
		{
			get
			{
				return this._AssemblyLength;
			}
			set
			{
				if ((this._AssemblyLength != value))
				{
					this.OnAssemblyLengthChanging(value);
					this.SendPropertyChanging();
					this._AssemblyLength = value;
					this.SendPropertyChanged("AssemblyLength");
					this.OnAssemblyLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyDate", DbType="DateTime NOT NULL")]
		public System.DateTime AssemblyDate
		{
			get
			{
				return this._AssemblyDate;
			}
			set
			{
				if ((this._AssemblyDate != value))
				{
					this.OnAssemblyDateChanging(value);
					this.SendPropertyChanging();
					this._AssemblyDate = value;
					this.SendPropertyChanged("AssemblyDate");
					this.OnAssemblyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyFiles", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary AssemblyFiles
		{
			get
			{
				return this._AssemblyFiles;
			}
			set
			{
				if ((this._AssemblyFiles != value))
				{
					this.OnAssemblyFilesChanging(value);
					this.SendPropertyChanging();
					this._AssemblyFiles = value;
					this.SendPropertyChanged("AssemblyFiles");
					this.OnAssemblyFilesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Compressed", DbType="Bit NOT NULL")]
		public bool Compressed
		{
			get
			{
				return this._Compressed;
			}
			set
			{
				if ((this._Compressed != value))
				{
					this.OnCompressedChanging(value);
					this.SendPropertyChanging();
					this._Compressed = value;
					this.SendPropertyChanged("Compressed");
					this.OnCompressedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tHostUpdateLog")]
	public partial class tHostUpdateLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AssemblyProjectID;
		
		private string _HostName;
		
		private string _HostIP;
		
		private System.DateTime _LastUpdateDate;
		
		private string _AssemblyNames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssemblyProjectIDChanging(int value);
    partial void OnAssemblyProjectIDChanged();
    partial void OnHostNameChanging(string value);
    partial void OnHostNameChanged();
    partial void OnHostIPChanging(string value);
    partial void OnHostIPChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    partial void OnAssemblyNamesChanging(string value);
    partial void OnAssemblyNamesChanged();
    #endregion
		
		public tHostUpdateLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyProjectID", DbType="Int NOT NULL")]
		public int AssemblyProjectID
		{
			get
			{
				return this._AssemblyProjectID;
			}
			set
			{
				if ((this._AssemblyProjectID != value))
				{
					this.OnAssemblyProjectIDChanging(value);
					this.SendPropertyChanging();
					this._AssemblyProjectID = value;
					this.SendPropertyChanged("AssemblyProjectID");
					this.OnAssemblyProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostName", DbType="NVarChar(256)")]
		public string HostName
		{
			get
			{
				return this._HostName;
			}
			set
			{
				if ((this._HostName != value))
				{
					this.OnHostNameChanging(value);
					this.SendPropertyChanging();
					this._HostName = value;
					this.SendPropertyChanged("HostName");
					this.OnHostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostIP", DbType="NVarChar(32)")]
		public string HostIP
		{
			get
			{
				return this._HostIP;
			}
			set
			{
				if ((this._HostIP != value))
				{
					this.OnHostIPChanging(value);
					this.SendPropertyChanging();
					this._HostIP = value;
					this.SendPropertyChanged("HostIP");
					this.OnHostIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyNames", DbType="NVarChar(2048)")]
		public string AssemblyNames
		{
			get
			{
				return this._AssemblyNames;
			}
			set
			{
				if ((this._AssemblyNames != value))
				{
					this.OnAssemblyNamesChanging(value);
					this.SendPropertyChanging();
					this._AssemblyNames = value;
					this.SendPropertyChanged("AssemblyNames");
					this.OnAssemblyNamesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tAssemblyProject")]
	public partial class tAssemblyProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssemmblyProjectID;
		
		private string _AssemmblyProjectName;
		
		private EntitySet<tUpdateNumber> _tUpdateNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemmblyProjectIDChanging(int value);
    partial void OnAssemmblyProjectIDChanged();
    partial void OnAssemmblyProjectNameChanging(string value);
    partial void OnAssemmblyProjectNameChanged();
    #endregion
		
		public tAssemblyProject()
		{
			this._tUpdateNumbers = new EntitySet<tUpdateNumber>(new Action<tUpdateNumber>(this.attach_tUpdateNumbers), new Action<tUpdateNumber>(this.detach_tUpdateNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemmblyProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssemmblyProjectID
		{
			get
			{
				return this._AssemmblyProjectID;
			}
			set
			{
				if ((this._AssemmblyProjectID != value))
				{
					this.OnAssemmblyProjectIDChanging(value);
					this.SendPropertyChanging();
					this._AssemmblyProjectID = value;
					this.SendPropertyChanged("AssemmblyProjectID");
					this.OnAssemmblyProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemmblyProjectName", DbType="NVarChar(32)")]
		public string AssemmblyProjectName
		{
			get
			{
				return this._AssemmblyProjectName;
			}
			set
			{
				if ((this._AssemmblyProjectName != value))
				{
					this.OnAssemmblyProjectNameChanging(value);
					this.SendPropertyChanging();
					this._AssemmblyProjectName = value;
					this.SendPropertyChanged("AssemmblyProjectName");
					this.OnAssemmblyProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tAssemblyProject_tUpdateNumber", Storage="_tUpdateNumbers", ThisKey="AssemmblyProjectID", OtherKey="AssemblyProjectID")]
		public EntitySet<tUpdateNumber> tUpdateNumbers
		{
			get
			{
				return this._tUpdateNumbers;
			}
			set
			{
				this._tUpdateNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tUpdateNumbers(tUpdateNumber entity)
		{
			this.SendPropertyChanging();
			entity.tAssemblyProject = this;
		}
		
		private void detach_tUpdateNumbers(tUpdateNumber entity)
		{
			this.SendPropertyChanging();
			entity.tAssemblyProject = null;
		}
	}
	
	public partial class SelectAssemblyByAssemblyNameResult
	{
		
		private int _AssemblyLength;
		
		private System.Data.Linq.Binary _AssemblyFiles;
		
		public SelectAssemblyByAssemblyNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyLength", DbType="Int NOT NULL")]
		public int AssemblyLength
		{
			get
			{
				return this._AssemblyLength;
			}
			set
			{
				if ((this._AssemblyLength != value))
				{
					this._AssemblyLength = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyFiles", DbType="VarBinary(MAX)")]
		public System.Data.Linq.Binary AssemblyFiles
		{
			get
			{
				return this._AssemblyFiles;
			}
			set
			{
				if ((this._AssemblyFiles != value))
				{
					this._AssemblyFiles = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
